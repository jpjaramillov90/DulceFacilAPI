// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace DulceFacil.Infraestructura.AccesoDatos;

public partial class db_dulce_facilContext : DbContext
{
    public db_dulce_facilContext()
    {
    }

    public db_dulce_facilContext(DbContextOptions<db_dulce_facilContext> options)
        : base(options)
    {
    }

    public virtual DbSet<ciudades> ciudades { get; set; }

    public virtual DbSet<cliente> cliente { get; set; }

    public virtual DbSet<detalle_pedido> detalle_pedido { get; set; }

    public virtual DbSet<direciones> direciones { get; set; }

    public virtual DbSet<estado_pedido> estado_pedido { get; set; }

    public virtual DbSet<estado_ruta> estado_ruta { get; set; }

    public virtual DbSet<pedido> pedido { get; set; }

    public virtual DbSet<permisos> permisos { get; set; }

    public virtual DbSet<precio_producto> precio_producto { get; set; }

    public virtual DbSet<precio_producto_historico> precio_producto_historico { get; set; }

    public virtual DbSet<producto> producto { get; set; }

    public virtual DbSet<provincias> provincias { get; set; }

    public virtual DbSet<roles> roles { get; set; }

    public virtual DbSet<ruta> ruta { get; set; }

    public virtual DbSet<tipo_cliente> tipo_cliente { get; set; }

    public virtual DbSet<usuario> usuario { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=JOAOJV;Initial Catalog=db_dulce_facil;Persist Security Info=True;User ID=sa;Password=Angul4r23;TrustServerCertificate=True;");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<ciudades>(entity =>
        {
            entity.HasKey(e => e.id_ciudad).HasName("PK_Ciudades");

            entity.Property(e => e.ciudad)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false);
        });

        modelBuilder.Entity<cliente>(entity =>
        {
            entity.HasKey(e => e.id_cliente).HasName("PK_Cliente");

            entity.Property(e => e.apellidos)
                .IsRequired()
                .HasMaxLength(45)
                .IsUnicode(false);
            entity.Property(e => e.correo)
                .IsRequired()
                .HasMaxLength(45)
                .IsUnicode(false);
            entity.Property(e => e.nombres)
                .IsRequired()
                .HasMaxLength(45)
                .IsUnicode(false);
            entity.Property(e => e.telefono)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.id_tipo_clienteNavigation).WithMany(p => p.cliente)
                .HasForeignKey(d => d.id_tipo_cliente)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_Tipo_cliente");
        });

        modelBuilder.Entity<detalle_pedido>(entity =>
        {
            entity.HasKey(e => e.id_detalle_pedido).HasName("PK_DetallePedido");

            entity.Property(e => e.precio_unitario).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.subtotal).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.id_pedidoNavigation).WithMany(p => p.detalle_pedido)
                .HasForeignKey(d => d.id_pedido)
                .HasConstraintName("FK_DetallePedido_Pedido");

            entity.HasOne(d => d.id_productoNavigation).WithMany(p => p.detalle_pedido)
                .HasForeignKey(d => d.id_producto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DetallePedido_Producto");
        });

        modelBuilder.Entity<direciones>(entity =>
        {
            entity.HasKey(e => e.id_direccion).HasName("PK_Direciones");

            entity.Property(e => e.calle_principal)
                .IsRequired()
                .HasMaxLength(45)
                .IsUnicode(false);
            entity.Property(e => e.calle_secundaria)
                .IsRequired()
                .HasMaxLength(45)
                .IsUnicode(false);
            entity.Property(e => e.numero)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.referencias)
                .HasMaxLength(45)
                .IsUnicode(false);

            entity.HasOne(d => d.id_ciudadNavigation).WithMany(p => p.direciones)
                .HasForeignKey(d => d.id_ciudad)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_Ciudades_direciones");

            entity.HasOne(d => d.id_clienteNavigation).WithMany(p => p.direciones)
                .HasForeignKey(d => d.id_cliente)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_Cliente_direciones");

            entity.HasOne(d => d.id_provinciaNavigation).WithMany(p => p.direciones)
                .HasForeignKey(d => d.id_provincia)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_Provincias_direciones");
        });

        modelBuilder.Entity<estado_pedido>(entity =>
        {
            entity.HasKey(e => e.id_estado_pedido).HasName("Pk_Estado_pedido");

            entity.Property(e => e.estado_pedido1)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("estado_pedido");
        });

        modelBuilder.Entity<estado_ruta>(entity =>
        {
            entity.HasKey(e => e.id_estado_ruta).HasName("PK_Estado_ruta");

            entity.Property(e => e.estado_ruta1)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("estado_ruta");
        });

        modelBuilder.Entity<pedido>(entity =>
        {
            entity.HasKey(e => e.id_pedido).HasName("Pk_pedido");

            entity.Property(e => e.fecha_pedido).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.id_clienteNavigation).WithMany(p => p.pedido)
                .HasForeignKey(d => d.id_cliente)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("Fk_pedido_cliente");

            entity.HasOne(d => d.id_estado_pedidoNavigation).WithMany(p => p.pedido)
                .HasForeignKey(d => d.id_estado_pedido)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("Fk_Estado_pedido");

            entity.HasOne(d => d.id_rutaNavigation).WithMany(p => p.pedido)
                .HasForeignKey(d => d.id_ruta)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("Fk_pedido_ruta");
        });

        modelBuilder.Entity<permisos>(entity =>
        {
            entity.HasKey(e => e.id_permiso).HasName("PK_Permisos");

            entity.Property(e => e.permiso)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<precio_producto>(entity =>
        {
            entity.HasKey(e => e.id_precio_producto).HasName("id_precio_producto");

            entity.ToTable(tb => tb.HasTrigger("trg_ins_precioProeductoHistorico"));

            entity.Property(e => e.precio).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.id_productoNavigation).WithMany(p => p.precio_producto)
                .HasForeignKey(d => d.id_producto)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_Prdocuto_id_producto");
        });

        modelBuilder.Entity<precio_producto_historico>(entity =>
        {
            entity.HasKey(e => e.id_precio_producto_historico);

            entity.Property(e => e.fecha_fin).HasDefaultValueSql("(NULL)");
            entity.Property(e => e.fecha_inicio).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.usuaio_actualiza)
                .IsRequired()
                .HasMaxLength(45)
                .IsUnicode(false);

            entity.HasOne(d => d.id_precio_productoNavigation).WithMany(p => p.precio_producto_historico)
                .HasForeignKey(d => d.id_precio_producto)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("Fk_Precio_producto");
        });

        modelBuilder.Entity<producto>(entity =>
        {
            entity.HasKey(e => e.id_producto).HasName("PK_Producto");

            entity.Property(e => e.descripcion)
                .HasMaxLength(45)
                .IsUnicode(false);
            entity.Property(e => e.nombre_producto)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false);
        });

        modelBuilder.Entity<provincias>(entity =>
        {
            entity.HasKey(e => e.id_provincia).HasName("PK_Provincias");

            entity.Property(e => e.provincia)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false);
        });

        modelBuilder.Entity<roles>(entity =>
        {
            entity.HasKey(e => e.id_rol).HasName("PK_Rol");

            entity.Property(e => e.rol)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasMany(d => d.id_permiso).WithMany(p => p.id_rol)
                .UsingEntity<Dictionary<string, object>>(
                    "roles_permisos",
                    r => r.HasOne<permisos>().WithMany()
                        .HasForeignKey("id_permiso")
                        .HasConstraintName("Fk_Permiso"),
                    l => l.HasOne<roles>().WithMany()
                        .HasForeignKey("id_rol")
                        .HasConstraintName("Fk_Rol"),
                    j =>
                    {
                        j.HasKey("id_rol", "id_permiso").HasName("PK__roles_pe__889447C49756C59B");
                    });
        });

        modelBuilder.Entity<ruta>(entity =>
        {
            entity.HasKey(e => e.id_ruta).HasName("PK_Ruta");

            entity.HasOne(d => d.id_estado_rutaNavigation).WithMany(p => p.ruta)
                .HasForeignKey(d => d.id_estado_ruta)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("Fk_Estado_ruta");

            entity.HasOne(d => d.id_rolNavigation).WithMany(p => p.ruta)
                .HasForeignKey(d => d.id_rol)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("Fk_Roles_ruta");
        });

        modelBuilder.Entity<tipo_cliente>(entity =>
        {
            entity.HasKey(e => e.id_tipo_cliente).HasName("PK_Tipo_cliente");

            entity.Property(e => e.tipo_cliente1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tipo_cliente");
        });

        modelBuilder.Entity<usuario>(entity =>
        {
            entity.HasKey(e => e.id_usuario).HasName("PK_Usuario");

            entity.Property(e => e.apellidos_usuario)
                .IsRequired()
                .HasMaxLength(45)
                .IsUnicode(false);
            entity.Property(e => e.contrasena)
                .IsRequired()
                .HasMaxLength(45)
                .IsUnicode(false);
            entity.Property(e => e.correo)
                .IsRequired()
                .HasMaxLength(45)
                .IsUnicode(false);
            entity.Property(e => e.nombres_usuario)
                .IsRequired()
                .HasMaxLength(45)
                .IsUnicode(false);

            entity.HasOne(d => d.id_rolNavigation).WithMany(p => p.usuario)
                .HasForeignKey(d => d.id_rol)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("Fk_Roles_usuario");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}